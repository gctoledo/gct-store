// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//criando tabelas (model)

model Category {
  id       String    @id @default(uuid()) //id -> é uma string -> @id significa que é chave primária -> default dele é aleatório (uuid())
  name     String
  slug     String
  imageUrl String
  products Product[] //criando relacao dos dois models, products é um array de Product
}

model Product {
  id              String   @id @default(uuid())
  name            String
  slug            String
  description     String
  basePrice       Decimal  @db.Decimal(8, 2) //define o preco como um campo decimal com no maximo 8 numeros antes da virgula e maximo 2 numeros depois da virgula
  imageUrls       String[]
  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id]) //cria uma relacao entre os dois models
  //category tem relacao com o model Category -> fields: indica o campo do model Product que tem relação / references: indica o campo do model Category que possui relacao com fields
  discountPercentage Int      @default(0)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}